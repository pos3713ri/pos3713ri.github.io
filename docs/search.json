[
  {
    "objectID": "research-project.html",
    "href": "research-project.html",
    "title": "Research Project",
    "section": "",
    "text": "Your task this semester: write a paper of modest ambition and exceptional quality that makes a descriptive argument about politics."
  },
  {
    "objectID": "research-project.html#overview",
    "href": "research-project.html#overview",
    "title": "Research Project",
    "section": "Overview",
    "text": "Overview\nWe’ll borrow Gerring’s (2012, 722)1 definition of a descriptive argument:\n1 See also Part II of Gerring’s Social Science Methodology for a supplement to Gerrying (2012).\nA descriptive argument describes some aspect of the world. In doing so, it aims to answer what questions (e.g., when, whom, out of what, in what manner) about a phenomenon or a set of phenomena. Descriptive arguments are about what is/was. For example: ‘Over the course of the past two centuries there have been three major waves of democratization.’\n\nYou might feel confused. After all, Gerring writes that description “has come to be employed as a euphemism for a failed, or not yet proven, causal inference.” At best, we might think that description only serves to support the primary task of causal inference. Indeed, King, Keohane, and Verba (1994, 34) write that “description, in turn, loses most of its interest unless linked to some causal relationships.”\nHowever, description is an essential component of social science. de Kadt and Grzymala-Busse (2025) argue that description is “a fundamental component of the social scientific enterprise” (2) that “engages theory by invoking existing theories, motivating new theoretical models and their refinement, and in some cases even evaluating theory” (24). Gerring writes that “description can be written out of the discipline only at great cost to our understandings of the world” (744). And Holmes et al. (2024) write that “answering questions of ‘who,’ ‘what,’ ‘when,’ ‘where,’ and ‘how’—in concert with but also independent from causal inquiry—is vital to the continued relevance and coherence of our discipline in both scholarly and public-facing work” (54).\nAs a whole, I suggest that social science asks: how can we intervene to make the world a better place? This implies three parts.\n\nFirst, what does the world look like now?\nSecond, what worlds would be better?\nAnd third, what are the effects of potential interventions?\n\nI view answers the the first question—a description of the world as it exists—as a difficult and worthwhile challenge. It seems difficult to even entertain the second and third questions without a thorough understanding of the world as it exists.\nAnd you may think that description is easy, and establishing causality is hard. I think you’ll find that description is easier statistically, but a more difficult struggle overall.2\n2 My thinking is something like this. When you randomly assign \\(T\\) and you measure \\(Y\\) afterward, you’ve established that \\(T\\) causes \\(X\\). But suppose that you just measure \\(Y\\). It isn’t clear what you’ve just measured or whether it’s meaningful. Of course, these same questions lay hiding in the shadows in the randomized experiment. But the randomization guarantees a “causal inference” that is sufficient to strike our fancy. The descriptive argument brings the subtler questions of measures and their meanings into the broad daylight. Fuzzy concepts and measurements can’t hide behind a “compelling identification strategy” when you are making a descriptive argument.Examples of the struggle to describe are easy to find. Consider two ideas that are central to political science: “democracy” or “political ideology.” If a reporter from the New York Times asked whether democracy was in decline around the world, the answer isn’t easy or obvious. Political scientists are not in agreement. If that reporter asked you whether there are many or few moderate voters in the US, the answer isn’t obvious or easy. Again, political scientists are not in agreement."
  },
  {
    "objectID": "research-project.html#a-recent-debate-about-moderates",
    "href": "research-project.html#a-recent-debate-about-moderates",
    "title": "Research Project",
    "section": "A Recent Debate About Moderates",
    "text": "A Recent Debate About Moderates\nA recent exchange in the American Political Science Review centers on how best to characterize ideological moderation in the American public. In the original article, Fowler et al. (2023) develop a statistical model to distinguish among types of moderates, finding that while a single ideological dimension captures most Americans’ policy views, moderates—especially those not neatly aligned—remain central to electoral accountability. In response, Broockman and Lauderdale (2025) critique this approach, arguing that it overestimates the number of genuinely one-dimensional voters and fails to account for individuals with cross-pressured or multidimensional views. Finally, Fowler et al. (2024) reply by showing that Broockman and Lauderdale’s visual and simulation-based critiques do not invalidate their main conclusions, reaffirming that most Americans’ policy preferences are well summarized by a single ideological dimension and that most such individuals are ideologically moderate."
  },
  {
    "objectID": "research-project.html#a-recent-debate-about-backsliding",
    "href": "research-project.html#a-recent-debate-about-backsliding",
    "title": "Research Project",
    "section": "A Recent Debate About Backsliding",
    "text": "A Recent Debate About Backsliding\n\nLittle and Meng (2024a) argue that objective indicators (e.g., electoral outcomes) show little evidence of global democratic decline over the past decade, challenging findings based on subjective expert assessments.\n\nNumerous authors offered responses published in the same issue of PS. For example:\n\nKnutsen et al. (2024) critique Little and Meng’s reliance on objective measures, highlighting issues in conceptualization, indicator selection, and aggregation that may overlook nuanced democratic erosion.\nGorokhovskaia (2024) emphasizes the importance of disaggregating data, noting that while electoral indicators may remain stable, other areas like media freedom show signs of backsliding.\nMiller (2024) contends that objective indicators fail to detect democratic erosion within established democracies, missing subtle but significant declines.\n\nIn a reply, Little and Meng (2024b) acknowledge the critiques and emphasize the need for improved measurement tools to better understand democratic backsliding."
  },
  {
    "objectID": "research-project.html#assignments",
    "href": "research-project.html#assignments",
    "title": "Research Project",
    "section": "Assignments",
    "text": "Assignments\n\nProspectus (due by Oct. 21) A memo describing your project in as much detail as possible. This should resemble the structure of a paper, though it will still be an early, developing version. Instructor comments, ASAP.\nFirst Draft (due by Nov. 6) Submit the first full draft of your paper. This should include a working version of all major sections, figures, and tables. Feedback from 2 peers, ASAP.\nPoster Presentation (done around week of Dec. 2, but TBD) Present your research in a short, conference-style poster session. This is a low-stakes chance to get feedback and practice communicating your work.\nFinal Draft (due by Dec. 9) Submit the final version of your research paper. You must submit a PDF of the final version of the paper and the data and computer code to reproduce your work. This version should reflect feedback from both the poster session and instructor comments. This version should be polished."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Schedule",
    "section": "",
    "text": "Note: Complete the homework after the associated class, but before the next class.\nAug 26: Questions and Models [hw]\nAug 28: R [hw] [notes]\nSep 2: Data [hw] [slides] [notes]\nSep 4: Causality and Histograms [hw] [slides]\nSep 9: Histograms in R\nSep 11: Avg and SD\nSep 16: Avg and SD in R\nSep 18: Normal Model\nSep 23: Review\nComputing Assignment 1 due.\nSep 25: Exam 1\nSep 30: Wrangling 1\nOct 2: Wrangling 2\nOct 7: Scatterplots\nOct 9: Correlation\nOct 14: Regression\nOct 16: Regression in R\nOct 21: Multiple Regression\nRP prospectus due.\nOct 23: Extensions to Multiple Regression\nOct 28: Review\nOct 30: Exam 2\nNov 4: Probability Basics\nNov 6: Numbered-Ticket Model\nRP 1st draft due.\nNov 11: Veterans Day - No Classes\nNov 13: Sample Surveys\nRP peer review due.\nNov 18: Randomized Experiments\nNov 20: Confidence Intervals\nNov 25: Hypothesis Tests\nNov 27: Thanksgiving - No Classes\nDec 2: Wrap\nRP poster presentation around here.\nDec 4: Review\nComputing Assignment 2 due.\nDec 9: Final Exam, 7:30 a.m.– 9:30 a.m.\nRP final draft due."
  },
  {
    "objectID": "files/02-notes-computing.html",
    "href": "files/02-notes-computing.html",
    "title": "Statistical Computing with R",
    "section": "",
    "text": "R is a complex, powerful statistical programming language. It’s also free! I use R to do all my empirical and methodological work. I use R to wrangle data, fit statistical models, perform simulation studies, and draw graphics.\nR works via scripts. The user writes a program called a “script” or program; R executes the program. This might intimidate you a little. That’s okay. It’s easier than it sounds, and Rob (our fantastic TA) and I (your mediocre professor) are here to help you.\nWe’ll learn a lot about R this semester, but we’ll learn only some aspects of R. I have to include some features of R and exclude others. Just because I show you one way to tackle a problem doesn’t mean it’s the only (or the best) way. But in order to get you working with data ASAP, we have to exclude some important concepts and tools from R.\nThis is important. I caution you against googling for help. I have put together a coherent sequence of skills. If you go off on your own, you’ll hop outside that sequence. Instead of seeking help elsewhere, refer back to my notes, and ask me and Rob questions.\nRather than use R directly, we’ll use RStudio to manage and run our R programs. RStudio is simply a way to organize our R code. A good analogy is a desk—RStudio helps us keep our desk neat and tidy while we work. I use RStudio for all my R programming. I even use RStudio to write documents and make presentations using R Markdown. I write my notes and build my course websites with RStudio.\nTo make things even simpler, we’re going to use RStudio in the cloud. This avoids lots of issues with setting up your computer for statistical computing. The only downside is that the cloud is noticeably slower than a local installation of RStudio."
  },
  {
    "objectID": "files/02-notes-computing.html#importance",
    "href": "files/02-notes-computing.html#importance",
    "title": "Statistical Computing with R",
    "section": "Importance",
    "text": "Importance\nDoing your work in a script is important. You might have done a statistical analysis before or at least manipulated data with Excel. Most likely, you went through several steps and perhaps ended with a graph. That’s fantastic, but there are several problems.\n\nIf you want to re-do your analysis, you must go through the whole process again.\nYou might forget what you did. (I shouldn’t say “might”—you will forget.)\nYou cannot easily show others what you did. Instead, they must take your word for it.\nYou cannot make small changes to your analysis without going through the whole process again.\n\nScripting solves each of these problems.\n\nIf you want to re-do your analysis, just open your script and click Run.\nIf you forget what you did, just look at your script.\nIf you want to show others exactly what you did, just show them your script.\nIf you want to make a small change to your analysis, just make a small change to your script and click Run.\n\nScripting might seem like a lot more work. At first, it will be more work. By the end of the semester, it will be less work. As part of the papers you’ll write for this class, you’ll write a script."
  },
  {
    "objectID": "files/02-notes-computing.html#comments",
    "href": "files/02-notes-computing.html#comments",
    "title": "Statistical Computing with R",
    "section": "Comments",
    "text": "Comments\nYou can also insert comments into R scripts. This is very important, especially when you are first learning to program. To insert a comment, type a pound or hash sign # (i.e., “hashtag” to me) anywhere in the code. Anything on the line after the hash will be ignored. I’ll always carefully comment my R code, and I’ll be even more careful about it for this class. Here’s an example of some commented code for the previous example.\n\n\nProTip: Use comments often to clearly describe the code to others and your future self."
  },
  {
    "objectID": "files/02-notes-computing.html#scalars",
    "href": "files/02-notes-computing.html#scalars",
    "title": "Statistical Computing with R",
    "section": "Scalars",
    "text": "Scalars\nLet’s start with a single number, sometimes called a “scalar.” Let’s create an object b that holds or contains the number 2. To do this, we use the assignment operator &lt;-, which we read as “gets.”\n\nb &lt;- 2 # read as \"b gets 2\"\n\nWe can be very creative with naming objects. Rather than b, we could have used myobject, myObject, my.object, or my_object. From a style perspective, I prefer my_object or important_variable. In general, you want to give objects descriptive names so that your code is easy to read, but short names so that the code is compact and easy to read and write.\n\nProTip: Give objects short, descriptive names.\n\nWe can now repeat some of the calculations from above, using b instead of two. Given that you know b equals two, check that the following calculations make sense.\n\nb + 3\n\n[1] 5\n\nb*3\n\n[1] 6\n\nb^3\n\n[1] 8\n\n3^b\n\n[1] 9\n\nb/3\n\n[1] 0.6666667\n\nexp(b)\n\n[1] 7.389056\n\nlog(b)\n\n[1] 0.6931472\n\nsqrt(b)\n\n[1] 1.414214\n\n\nYou probably realize that it would be easier to just use 2 rather than b. But we’ll be doing more complicated calculations. Rather than b holding scalars, it might hold thousands of survey responses. Rather than applying a simple function, we might apply many functions."
  },
  {
    "objectID": "files/02-notes-computing.html#functions",
    "href": "files/02-notes-computing.html#functions",
    "title": "Statistical Computing with R",
    "section": "Functions",
    "text": "Functions\nSo what is a function? In the above examples exp(), log(), and sqrt() are functions. Importantly, functions are followed immediately by parentheses (i.e., (), not [] or {}, which have different meanings). Arguments are supplied in the functions that tell the function what to do. We separate multiple arguments with commas.\nYou probably didn’t think about it at the time, but you can use many different bases when taking a logarithm. What base did we use when we ran log(b)? To see this, let’s open the help file.\n\nhelp(log) # or, equivalently, ?log\n\n\nThe section “Usage” shows the typical function syntax. The log() function takes up to two arguments. The first argument x is a “numeric vector.” We’ll talk more specifically about numeric vectors below, but for now, we can consider a scalar as a numeric vector. If we provide the arguments in the same order that they appear in the function in the “Usage” section, then we do not have to name the argument, but we still can. For example, log(b) and log(x = b) are equivalent.\n\nProTip: If you need to know how to use a particular function such as exp(), type help(exp) or ?exp into the console.\n\nYou’ll also see from the help file that the default is base = exp(1), where exp(1) is just the number \\(e\\), the base of the natural log. This means that if you don’t specify base, it will use base = exp(1).\n\nlog(b) # natural log\n\n[1] 0.6931472\n\nlog(b, base = exp(1)) # also natural log\n\n[1] 0.6931472\n\nlog(b, base = 10) # base-10 log\n\n[1] 0.30103\n\nlog(b, 10) # also a base-10 log\n\n[1] 0.30103\n\n\nNotice that if we put the arguments in the proper order, we do not have to name the argument, so that log(b, base = 10) is equivalent to log(b, 10). However, the meaning of log(b, base = 10) is clearer, so I prefer that approach.\n\nProTip: If arguments are supplied to functions in the correct order, then names are unnecessary. However, names should be included whenever there might be doubt about the meaning of the argument. In practice, this most often means leaving the first argument unnamed and naming the rest.\n\nReview Exercises\n\nOpen a new script and give the object x the scalar 32.\nRepeat the first set of review exercises using x rather than the number 2.\nAdd comments explaining what the code is doing."
  },
  {
    "objectID": "files/02-notes-computing.html#vectors",
    "href": "files/02-notes-computing.html#vectors",
    "title": "Statistical Computing with R",
    "section": "Vectors",
    "text": "Vectors\nIf we can only work with single numbers, we won’t get very far.\nWhen we do statistical computing, we’ll usually want to work with collections of numbers (or collections of character strings, like \"Republican\" or \"Male\"). In an actual problem, the collection might contain thousands or millions of numbers. Maybe these are survey respondents’ ages or hourly stock prices over the last few years. Maybe they are a respondent’s sex (i.e., \"Male\" or \"Female\") or party identification (i.e., \"Republican\", \"Democrat\", \"Independent\", or \"Other\").\nWe’ll call this collection of numbers or character strings a “vector” and we’ll refer to the number of elements in the vector as the “length” of the vector.\nThere are several types of vectors, classified by the sort of elements they contain.\n\nnumeric: contain numbers, such as 1.1, 2.4, and 3.4. Sometimes numeric variables are subdivided into integer (whole numbers, e.g., 1, 2, 3, etc.) and double (fractions, e.g., 1.47, 3.35462, etc.).\ncharacter: contain character strings, such as \"Republican\" or \"Argentina (2001)\".\nfactor: contain character strings, such as \"Very Liberal\", \"Weak Republican\", or \"Female\". Similar to character, except the entire set of possible levels (and their ordering) is defined.\nlogical: contain TRUE and/or FALSE.\n\n\nNumeric Vectors\nRather than the scalar 2, for example, we might want to work with the collection 2, 5, 9, 7, and 3. Let’s assign the collection above to the object a.\nWe can create a vector using the “collect” function c().\n\na &lt;- c(2, 5, 9, 7, 3)\n\n\nProTip: To create a vector, one tool we can use is the “collect” function c().\n\nIf we want to look at the object a, we need to enter a on a line by itself. This will print the object a for us to inspect. But since we only need to check this once, maybe we just type it in the console instead of including it in the script.\n\na\n\n[1] 2 5 9 7 3\n\n\nWe can now apply functions to the vector a just like we did for the scalar b. In some cases, the function operates on each element of the vector (e.g., log()); in other cases, the function combines the elements into a new number (e.g., mean()).\n\na + 3\n\n[1]  5  8 12 10  6\n\na*3\n\n[1]  6 15 27 21  9\n\na^3\n\n[1]   8 125 729 343  27\n\n3^a\n\n[1]     9   243 19683  2187    27\n\na/3\n\n[1] 0.6666667 1.6666667 3.0000000 2.3333333 1.0000000\n\nexp(a)\n\n[1]    7.389056  148.413159 8103.083928 1096.633158   20.085537\n\nlog(a)\n\n[1] 0.6931472 1.6094379 2.1972246 1.9459101 1.0986123\n\nlog(a, base = 10)\n\n[1] 0.3010300 0.6989700 0.9542425 0.8450980 0.4771213\n\nsqrt(a)\n\n[1] 1.414214 2.236068 3.000000 2.645751 1.732051\n\n# sum() adds all the elements together\nsum(a)\n\n[1] 26\n\n# mean() finds the average—now we're doing statistics!\nmean(a)\n\n[1] 5.2\n\n\nSo far, we’ve only used numeric vectors—vectors that contain numbers. But we can create and work with other types of vectors as well. For now, let’s just illustrate two types: vectors of character strings, factors (and ordered factors), and logical vectors.\nReview Exercises\n\nIn a script (perhaps the script you began in the exercises above), create a numeric vector assigning the collection 2, 6, 4, 3, 5, and 17 to the object my_vector.\nCreate another numeric vector assigning the collection 64, 13, and 67 to the object myOtherVector.\nUse the sum() function to add the elements of my_vector together.\nUse the sqrt() function to take the square root of the elements of myOtherVector.\nAdd 3 to the elements of my_vector.\nAdd comments to the script explaining what this code is doing.\n\n\n\nCharacter Vectors\nCharacter strings are simply letters (or numbers, I suppose) surrounded by quotes, such as \"Republican\" or \"Male\". If we c() (i.e., “combine”) together multiple character strings, then we have a character vector.\n\n# create character vector\nx &lt;- c(\"Republican\", \"Democrat\", \"Republican\", \"Independent\")\n\n# print x\nx\n\n[1] \"Republican\"  \"Democrat\"    \"Republican\"  \"Independent\"\n\n# for fun, try to multiply x times 3\nx*3  # doesn't work\n\nError in x * 3: non-numeric argument to binary operator\n\n\nReview Exercises\n\nCreate a character vector containing the elements Male, Female, Male, Male, and Female. Assign this vector to the object sex.\nCreate a character vector containing the elements Liberal, Moderate, Moderate, Conservative, and Liberal. Assign this vector to the object ideology.\n\n\n\nFactor Vectors\nA factor vector is much like a character vector, but can only take on predefined values. While we might use a character vector to encode a variable that can have a variety of values (e.g., respondent’s name), we might use a factor to encode a variable that can take on just a few values, such as party identification (e.g., “Republican,” “Independent,” “Democrat,” “Other”). We refer to the possible values of a factor as the “levels.”\nCreating a factor is trickier than creating a numeric or character vector. We might take several approaches, but I suggest the following two-step approach:\n\nCreate a character vector containing the information using c().\nAdd the levels using the factor() function. We define the possible levels and their order by supplying a character vector to the levels argument.\n\nFactor vectors have two particular advantages over character vectors.\n\nThey allow us to easily see when one category has zero observations.\nThey allow us to control the order in which the categories appear. This will be useful, even for categorical variables that have no natural ordering (e.g., race, eye color).\n\n\n# create a character vector\npid &lt;- c(\"Republican\", \"Republican\", \"Democrat\", \"Other\")\n\n# check type\nclass(pid)\n\n[1] \"character\"\n\n# table pid\ntable(pid) # two problems: 1-weird order; 2-\"Independent\" missing\n\npid\n  Democrat      Other Republican \n         1          1          2 \n\n\nWe can fix these two problems by using a factor vector instead.\n\n# create a factor vector in two steps\n## step 1: create a character vector\npid_ch &lt;- c(\"Republican\", \"Republican\", \"Democrat\", \"Other\")\n## step 2: add levels using factor()\npid_fct &lt;- factor(\n  pid_ch,\n  levels = c(\"Republican\", \"Independent\", \"Democrat\", \"Other\")\n)\n\n# check type\nclass(pid_ch)\n\n[1] \"character\"\n\nclass(pid_fct)\n\n[1] \"factor\"\n\n# tables\ntable(pid_ch)\n\npid_ch\n  Democrat      Other Republican \n         1          1          2 \n\ntable(pid_fct)\n\npid_fct\n Republican Independent    Democrat       Other \n          2           0           1           1 \n\n\nYou can see that by creating a factor variable that contains the level information, we can see that we have no Independents in our sample of four respondents. We can also control the ordering of the categories.\nReview Exercises\n\nChange the character vector sex created above to a factor vector. Be sure to explicitly add the levels. The order does not matter. Assign this new factor variable to the object sex_factor.\nChange the character vector ideology created above to a factor vector. Be sure to explicitly add the levels. Use an intuitive ordering. Assign this new factor variable to the object ideology_factor.\n\n\n\nLogical Vectors\nLogical vectors contain elements that are true or false. R has a special way to represent true and false elements. R uses TRUE (without quotes) to represent true elements and FALSE (again, without quotes) to represent false elements. To create a logical vector, we can c() together a series of TRUEs and/or FALSEs.\n\n# create logical vector\nx &lt;- c(TRUE, TRUE, FALSE, TRUE, FALSE)\n\n# print x\nx  # or you could use print(x)\n\n[1]  TRUE  TRUE FALSE  TRUE FALSE\n\n\nReview Exercises\n\nCreate the logical vector containing TRUE, FALSE, FALSE, TRUE, and TRUE. Assign it to the object logic1.\nMultiply logic1 times 3. What do you get? Does that make sense?"
  },
  {
    "objectID": "files/01b-notes-questions.html",
    "href": "files/01b-notes-questions.html",
    "title": "Questions",
    "section": "",
    "text": "“The best scientists and explorers have the attributes of kids! They ask questions and have a sense of wonder. They have curiosity. ‘Who, what, where, why, when, and how!’ They never stop asking questions, and I never stop asking questions, just like a five year old.” —Sylvia Earle, marine biologist\nSee also a relevant xkcd comic.\nIn political science, we ask a lot of questions about politics, such as these questions about income inequality:\nIn answering these questions, we might make claims about politics. Claims are just answers to questions. We might make the following claims about income inequality:\nPolitical science is all about asking and answering questions. But the best approach to answering a question depends on the type of question.\nI break the questions we might ask (or claims we might make) about politics into three types: normative, descriptive, and causal. Answering each type question requires a different approach."
  },
  {
    "objectID": "files/01b-notes-questions.html#normative-questions",
    "href": "files/01b-notes-questions.html#normative-questions",
    "title": "Questions",
    "section": "Normative Questions",
    "text": "Normative Questions\nNormative questions ask: “What should the world look like?”\nIn my experience, most people associate political science with normative questions. When I tell people that I’m a political scientist, they tend to ask me normative questions.\n\n“You don’t think we should invade Iran, do you?” (Asking for a moral judgement about foreign policy.)\n“What do you think about the breakdown of the family in the U.S?” (Implicitly asking for a moral judgement about social policy, i.e., “Shouldn’t the government adopt more pro-family policies?”)\n“Don’t you think we’re rewarding laziness?” (Implicitly asking for a moral judgement about economic policy, i.e., “We shouldn’t be doing that, should we?”.)\n\nThese are normative questions, if perhaps somewhat ill-formed. They are important questions. Some political scientists, called “political philosophers” or “normative political theorists,” focus on these types of questions.\nSome important questions asked by normative political theorists include:\n\nShould the state redistribute wealth?\nUnder what conditions is war justified?\nWhat types of behavior should the state regulate?\nHow should states make policy?\n\nWe will not focus on these types of questions.\nHowever, we all bring normative views with us, and these views are helpful. Normative views can motivate us to focus on certain descriptive and causal questions. For example, perhaps you believe that democracy is the most normatively desirable form of government. This might lead you to describe how well democracy works in the U.S. (descriptive) or explain why some countries remain authoritarian (causal). Perhaps you believe that governments should not torture. This might lead you to describe the extent to which certain states use torture (descriptive) or the types of institutional arrangements (independent courts?) that reduce torture (causal).\nReversing the cycle, answers to descriptive and causal questions might inform our normative views. For example, if you know that income equality reduces economic growth, then perhaps you think the U.S. should adopt a more redistributive economic policy.\nNormative questions can motivate descriptive and causal questions. Descriptive and causal questions can inform normative debates. But it is important to draw a sharp distinction between normative questions and descriptive/causal questions, because the two require completely different approaches.\nFor this class, we’ll not focus at all on normative questions. Instead, we’ll focus on descriptive and causal questions."
  },
  {
    "objectID": "files/01b-notes-questions.html#descriptive-questions",
    "href": "files/01b-notes-questions.html#descriptive-questions",
    "title": "Questions",
    "section": "Descriptive Questions",
    "text": "Descriptive Questions\nDescriptive questions ask: “What does the world look like?”\nDescriptive questions ask for simple observations—a description of the world.\nFor example, we might want to ask the following questions:\n\nHow many chambers does the Swedish legislature have?\nWhat percent of voters voted for Barack Obama in 2008?\nHow many political parties are there in the United Kingdom?\nWhat percent of countries today are democracies? How has this changed over time?\nWhat percent of eligible voters actually voted in the U.S. in 2010? How does this compare with turnout in other countries?\nHow polarized is the U.S. Congress? How has this changed over time?\n\nAnswering these questions requires some sort of conceptualization (i.e., what do we mean by “polarized”?) and measurement (i.e., how can we quantify “polarization”?). But all that is required is observation. All we need to do make the appropriate measurements (i.e., gather data)."
  },
  {
    "objectID": "files/01b-notes-questions.html#causal-questions",
    "href": "files/01b-notes-questions.html#causal-questions",
    "title": "Questions",
    "section": "Causal Questions",
    "text": "Causal Questions\nCausal questions ask: “Why does the work look the way it does?”\nCausal questions ask about a cause or an effect. They ask for an explanation–why did something happen? We might be interested in the following causal questions:\n\nWhy is income inequality so high in the U.S.? Why is it growing so fast at the moment?\nWhat causes war between two countries?\nWhy do some states become democratic while others remain authoritarian?\nWhat is the effect of an independent court of last resort?\nWhat explains low turnout in the U.S.?\nWhy do some countries have many political parties and other countries have few?\nWhy does policy change rapidly in some times and/or places, but slowly in others?\nDoes presidentialism cause democratic failure?\n\nCausal questions and claims are about action. We have one variable acting on another. There are lots of verbs that summarize action: causes, influences, affects, changes, increases, decreases, etc. Causal questions ask us to use these sorts of verbs to describe the way the world works.\n\nMeaning\nWe use the word “cause” quite a bit in everyday language. We might say, for example, that smoking causes cancer. In making causal claims about politics, we might say things like “wealth causes democracy” or “education causes turnout.”\nBut what do these causal claims really mean? What does it mean for something to cause something else?\nThe idea of causation relies on the counterfactual. The counterfactual requires us to imagine a world that does not exist (i.e., runs counter to fact).\nFor example, suppose Amy has a college degree and voted in 2012. But we want to know if the college degree caused Amy to vote. In order to answer that question, we simply need to consider the counterfactual world in which Amy did not receive a college degree.\nWe might imagine rewinding time and simply removing Amy’s opportunity to attend college (but nothing else), then letting time move forward to 2012 and observing whether Amy votes. If Amy does not vote in the counterfactual world, then we say that the college degree caused Amy to vote. If Amy does vote in the counterfactual world, then we say that the college degree did not cause Amy to vote.\n\nIn order to assess causation, we simply need to imagine what would happen in the counterfactual world where the potential cause did or did not happen. We must compare two scenarios: the world in which the treatment happened to the world in which the treatment did not happen.\n\n\n\nProblem\nIt turns out that these questions are quite difficult to answer. We refer to the problem as “the fundamental problem of causal inference.”\nThe difficulty lies in the fact that we cannot observe the counterfactual world. In our example, we cannot observe whether Amy would have voted if she did not receive a college degree.\n\nBecause we cannot observe the counterfactual, we cannot observe causation. This is general—because causation is defined in terms of something unobservable, we cannot observe causation. This also points to the crucial distinction between descriptive and causal claims. We can observe whether or not descriptive claims are true. We cannot observe whether causal claims are true without a little bit of trickery.\nThere are some tricks to get around this problem, but it changes the question somewhat. For example, if the researcher randomly assigns subjects to a treatment or control group, she can discuss the “average causal effect.” We’ll discuss this in detail later, but be aware that we’ll fight with this problem all semester."
  },
  {
    "objectID": "files/01b-notes-questions.html#review-exercises",
    "href": "files/01b-notes-questions.html#review-exercises",
    "title": "Questions",
    "section": "Review Exercises",
    "text": "Review Exercises\n\nClearly define normative, descriptive, and causal questions/claims.\nDefine causation using the counterfactual.\nDescribe the fundamental problem of causal inference.\nConsider the concept of war. Come up with two examples each of normative, descriptive, and causal questions about war. Posit an answer to these questions as a claim.\nUsing the logic of the counterfactual that we discussed in class, explain why we cannot observe whether the two causal claims from question 4 are true or false.\nRepeat questions 4 and 5, but for the political variable that most interests you."
  },
  {
    "objectID": "04-hw.html",
    "href": "04-hw.html",
    "title": "Assignment 4",
    "section": "",
    "text": "Please complete before the next class. Make sure that you’ve completed all previous HW first."
  },
  {
    "objectID": "04-hw.html#causality",
    "href": "04-hw.html#causality",
    "title": "Assignment 4",
    "section": "1. Causality",
    "text": "1. Causality\nReview my slides on causality. Answer the following questions:\n\nDescribe the four ways to obtain a correlation.\nDescribe the other, fifth way you can get a correlation (i.e., by tricking yourself).\nI write that, under randomization, \\(R^{obs}_T - R^{obs}_C \\approx R^{hyp}_T - R^{hyp}_C\\).\n\nWhat do each of these four quantities refer to? What do we call the left-hand side? The right-hand side?\nNotice that the equality is not exact. Instead, it is approximate. What is the only reason it is not exact.\nExplain why randomization allows us to rule out spuriousness and reverse causation.\nDescribe the design of Gerber and Green’s turnout experiment. Describe the results (i.e., what percent of each group voted?). Discuss whether and how you can rule out any of the four possible ways to obtain a correlation.\n\nWas Gerber, Green, and Larimer’s study ethical?"
  },
  {
    "objectID": "04-hw.html#fpp",
    "href": "04-hw.html#fpp",
    "title": "Assignment 4",
    "section": "2. FPP",
    "text": "2. FPP\nRead ch 3. of FPP (the textbook; I sent a pdf via email) and do the assigned review exercises here."
  },
  {
    "objectID": "02-hw.html",
    "href": "02-hw.html",
    "title": "Assignment for Class 1",
    "section": "",
    "text": "Misc. Links\n\n\nHomework\nPlease complete before the next class.\nReview the notes on computing and complete the exercises throughout. Note that the exercises are mixed in throughout the notes, so don’t miss any."
  },
  {
    "objectID": "01-hw.html",
    "href": "01-hw.html",
    "title": "Assignment for Class 1",
    "section": "",
    "text": "Misc. Links\nWe didn’t get to this notes, so you’ll need to read them on your own. Come prepared next class with questions, comments, etc.\n\n[notes on questions]\n[notes on models]\n\nWe didn’t use the slides below. There’s no need for you to review them—everything is in the notes.\n\n[slides on questions]\n[slides on models]\n\nIn class, we used Gapminder to explore some data.\n\n\nHomework\nPlease complete before the next class.\n\nRead the syllabus carefully. If I’ve missed anything or failed to clearly explain any policy, please let me know. Come prepared to the next class with any questions or comments.\nOrder the simple pocket calculator that you’ll need for homework and exams, or make a plan to buy one (e.g., Walmart or other stores). Any “pocket” calculator works fine (not your phone or a graphing calculator). If you have questions about whether a calculator counts as “pocket,” just ask.\nRead my notes on questions and notes on models. Complete the exercises; you’ll find some at the bottom of both sets of notes.\nBookmark the course webpage for easy access. It’s https://pos3713ri.github.io. I’ll add material here throughout the semester.\nMake sure you have an up-to-date profile picture on Canvas.\nCreate an account on Posit Cloud. You can sign up directly or use an existing Google or GitHub account."
  },
  {
    "objectID": "03-hw.html",
    "href": "03-hw.html",
    "title": "Assignment 3",
    "section": "",
    "text": "Please complete before the next class. Make sure that you’ve completed all previous HW first."
  },
  {
    "objectID": "03-hw.html#fpp",
    "href": "03-hw.html#fpp",
    "title": "Assignment 3",
    "section": "FPP",
    "text": "FPP\nRead chs. 1 and 2 of FPP (the textbook; I sent a pdf via email) and do the assigned review exercises here.\nNotes:\n\nYou only need to do the review exercises for chs. 1 and 2—not every single chapter. We’ll get to the rest over the course of the semester. And yes, there is a reason I include this note.\nIf you want to print this PDF for convenience, that’s a great idea. It’s unlikely to change during the semester."
  },
  {
    "objectID": "03-hw.html#r",
    "href": "03-hw.html#r",
    "title": "Assignment 3",
    "section": "R",
    "text": "R\nRead and review your notes, my notes, and my slides over the basics of loading data into R. Answer the review questions throughout the document. Remember to practice!\n\n\n\n\n\n\nDebugging\n\n\n\nWhen you can’t get your code to work, it’s usually just a missing parenthesis or quotation mark. It’s not that you’re making a huge mistake. Huamns can sitll mkae snese wehn tehre are tpyos, but not computers! Check your code for typos carefully. Run your script one line at a time, from top to bottom, to find mistakes. As examples, most mistakes are like the following:\nb &lt;- c(\"Male\", \"Female)  # missing the second \" after \"Female\"\nexp(23  # forgot to close a parentheses\nlog(10 base = 2)  # missing comma between arguments\n\na &lt;- c(1, 2, 3)\nmean(A)  # R is case-sensitive--there's an object \"a\", but no object \"A\" \nmena(a)  # misspelled function name\nMean(a)  # R is case-senstive\nmean(a   # missing parentheses\nmean(\"a\")# using quotes when you shouldn't (or vice versa)"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data",
    "section": "",
    "text": "The data sets below are ready to visualize and model. They are tidy. I filtered out useful subsets. I selected and descriptively renamed the most important variables. I meaningfully reordered factors.\n\n\n\nName\nData Files\nCodebook\nDescription\n\n\n\n\ngamson\n[.csv] [.dta] [.rds] [.xlsx]\n[html]\nFrom Warwick and Druckman (2006)\n\n\nhealth\n[.csv] [.dta] [.rds] [.xlsx]\n[html]\nFrom Barrilleaux and Rainey (2014).\n\n\nnominate\n[.csv] [.dta] [.rds] [.xlsx]\n[html]\nIdeology scores for members of the U.S. House.\n\n\nparties\n[.csv] [.dta] [.rds] [.xlsx]\n[html]\nFrom Clark and Golder (2006) .\n\n\nstate-legislators\n[.csv] [.dta] [.rds] [.xlsx]"
  },
  {
    "objectID": "data.html#clean-tidy-data-sets",
    "href": "data.html#clean-tidy-data-sets",
    "title": "Data",
    "section": "",
    "text": "The data sets below are ready to visualize and model. They are tidy. I filtered out useful subsets. I selected and descriptively renamed the most important variables. I meaningfully reordered factors.\n\n\n\nName\nData Files\nCodebook\nDescription\n\n\n\n\ngamson\n[.csv] [.dta] [.rds] [.xlsx]\n[html]\nFrom Warwick and Druckman (2006)\n\n\nhealth\n[.csv] [.dta] [.rds] [.xlsx]\n[html]\nFrom Barrilleaux and Rainey (2014).\n\n\nnominate\n[.csv] [.dta] [.rds] [.xlsx]\n[html]\nIdeology scores for members of the U.S. House.\n\n\nparties\n[.csv] [.dta] [.rds] [.xlsx]\n[html]\nFrom Clark and Golder (2006) .\n\n\nstate-legislators\n[.csv] [.dta] [.rds] [.xlsx]"
  },
  {
    "objectID": "files/01c-notes-models.html",
    "href": "files/01c-notes-models.html",
    "title": "Models",
    "section": "",
    "text": "Most of us learned the scientific method as a rote process, something like the following:\n\nQuestion\nHypothesis\nExperiment\nAnalysis\nConclusion\n\nBut I don’t think that’s how any science, especially social science, really works. Science is imaginative. It’s creative. It’s much more like abstract painting or song-writing or poetry than replacing books in the library (the coldest, most mechanical task I can think of).\nSo if science isn’t rote hypothesizing and experimenting, what is it?\nLet’s look at Albert Einstein. Here are some things he said about his approach to science:\n\nWhen I examine myself and my methods of thought, I come close to the conclusion that the gift of imagination has meant more to me than any talent for absorbing absolute knowledge.\n\n\nAll great achievements of science must start from intuitive knowledge. I believe in intuition and inspiration…. At times I feel certain I am right while not knowing the reason.\n\n\nImagination is more important than knowledge.\n\n\nI have no special talent. I am only passionately curious.\n\nIn a 1961, the influential political scientist wrote the following:\n\n…I should like to suggest that empirical political science had better find a place for speculation. It is a grave though easy error for students of politics impressed by the achievements of the natural sciences to imitate all of their methods save the most critical one: the use of the imagination… surely it is imagination that has generally marked the intelligence of the great scientist, and speculation—often-times foolish speculation, it turned out later–has generally preceded great advances in scientific theory.\n\nThe scientific method is (sometimes serendipitous) interaction between speculation and observation.\n\nMy version of the scientific method is\n\nConcepts\nModels\nMeasurements\nComparisons\n\nThe first two components, concepts and models, we might refer to as “speculation.” I like this term, because it emphasizing the carefree, creative nature scientific notions. Many students are too afraid of being wrong. “speculation” frees us up to use our imagination.\n\n\nConcepts are simply mental constructs. For our purposes, concepts are words that we use to describe political entities. For example, we can use the concept of “democracy” and describe the United States as a democracy. We can use the concept of “liberal” and refer to Nancy Pelosi as a liberal.\nConcepts are important because they allow us to communicate and reason precisely and accurately about political events. In general, ambiguous concepts need work. We need precise, well-defined concepts. They will never be perfect, but we should always push ourselves toward more precision and clarity.\nSome concepts are easier to define precisely than others, for example. “Vote share” is easy to define. “Democracy” and “ideology” are not so easy.\nTo illustrate, answer the following question: What is a democracy? This is harder than it seems.\nConcepts in political science tend to be more abstract and ill-defined. But it is essential to define our concepts as precisely as possible. Before we can answer questions about our concepts, we must know what our concepts mean!\nDoes negativity cause an increase or a decrease in turnout? To answer this, we certainly need to know if “The incumbent voted for Obamacare” is considered negativity.\n\n\n\nA model is simply a tentative explanation of observed phenomena, used to better understand the world. Models need not be accurate in every respect. A model is sometimes referred to as a theory, explanation, or story.\nModels connect concepts in a causal fashion. One minimal model, for example, is that increasing the level of democracy in a country leads to more economic growth. In this case, we have two concepts, democracy and economic growth, connected causally. Of course, we’d want to elaborate a bit and flesh this model out into a fuller explanation. Why is it, exactly, that democracy causes growth?\nWe can also think of models as logical defenses or justifications of causal claims. For example, we might take two or three basic principles or axioms as given, and deduce causal claims from this. For example, we might assume that people behave in a way that benefits them most financially. We might also assume that the Republicans tend to adopt lower tax rates than Democrats. Therefore, it seems reasonable to conclude that an increase in one’s wealth makes them more likely to vote Republican.\n\n\n\nWe’ll spend some time later in the semester talking about measurements and comparisons. But for now, simply note that measurements are simply quantifications of our concepts. In order to study a phenomenon systematically, we often want to assign numbers to the entities of interest. If we are interested in the concept of economic growth, for example, then the percent change in GDP is a good way to quantify that concept. Similarly, if we are interested in democracy, then we might develop a process for assigning each country a score from -10 to 10, where -10 represents the least democratic countries and 10 represents the most democratic countries.\nOnce we have these measures, we’ll want to make the appropriate comparisons. For example, we might want to compare the average economic growth in democracies and non-democracies."
  },
  {
    "objectID": "files/01c-notes-models.html#the-scientific-method",
    "href": "files/01c-notes-models.html#the-scientific-method",
    "title": "Models",
    "section": "",
    "text": "Most of us learned the scientific method as a rote process, something like the following:\n\nQuestion\nHypothesis\nExperiment\nAnalysis\nConclusion\n\nBut I don’t think that’s how any science, especially social science, really works. Science is imaginative. It’s creative. It’s much more like abstract painting or song-writing or poetry than replacing books in the library (the coldest, most mechanical task I can think of).\nSo if science isn’t rote hypothesizing and experimenting, what is it?\nLet’s look at Albert Einstein. Here are some things he said about his approach to science:\n\nWhen I examine myself and my methods of thought, I come close to the conclusion that the gift of imagination has meant more to me than any talent for absorbing absolute knowledge.\n\n\nAll great achievements of science must start from intuitive knowledge. I believe in intuition and inspiration…. At times I feel certain I am right while not knowing the reason.\n\n\nImagination is more important than knowledge.\n\n\nI have no special talent. I am only passionately curious.\n\nIn a 1961, the influential political scientist wrote the following:\n\n…I should like to suggest that empirical political science had better find a place for speculation. It is a grave though easy error for students of politics impressed by the achievements of the natural sciences to imitate all of their methods save the most critical one: the use of the imagination… surely it is imagination that has generally marked the intelligence of the great scientist, and speculation—often-times foolish speculation, it turned out later–has generally preceded great advances in scientific theory.\n\nThe scientific method is (sometimes serendipitous) interaction between speculation and observation.\n\nMy version of the scientific method is\n\nConcepts\nModels\nMeasurements\nComparisons\n\nThe first two components, concepts and models, we might refer to as “speculation.” I like this term, because it emphasizing the carefree, creative nature scientific notions. Many students are too afraid of being wrong. “speculation” frees us up to use our imagination.\n\n\nConcepts are simply mental constructs. For our purposes, concepts are words that we use to describe political entities. For example, we can use the concept of “democracy” and describe the United States as a democracy. We can use the concept of “liberal” and refer to Nancy Pelosi as a liberal.\nConcepts are important because they allow us to communicate and reason precisely and accurately about political events. In general, ambiguous concepts need work. We need precise, well-defined concepts. They will never be perfect, but we should always push ourselves toward more precision and clarity.\nSome concepts are easier to define precisely than others, for example. “Vote share” is easy to define. “Democracy” and “ideology” are not so easy.\nTo illustrate, answer the following question: What is a democracy? This is harder than it seems.\nConcepts in political science tend to be more abstract and ill-defined. But it is essential to define our concepts as precisely as possible. Before we can answer questions about our concepts, we must know what our concepts mean!\nDoes negativity cause an increase or a decrease in turnout? To answer this, we certainly need to know if “The incumbent voted for Obamacare” is considered negativity.\n\n\n\nA model is simply a tentative explanation of observed phenomena, used to better understand the world. Models need not be accurate in every respect. A model is sometimes referred to as a theory, explanation, or story.\nModels connect concepts in a causal fashion. One minimal model, for example, is that increasing the level of democracy in a country leads to more economic growth. In this case, we have two concepts, democracy and economic growth, connected causally. Of course, we’d want to elaborate a bit and flesh this model out into a fuller explanation. Why is it, exactly, that democracy causes growth?\nWe can also think of models as logical defenses or justifications of causal claims. For example, we might take two or three basic principles or axioms as given, and deduce causal claims from this. For example, we might assume that people behave in a way that benefits them most financially. We might also assume that the Republicans tend to adopt lower tax rates than Democrats. Therefore, it seems reasonable to conclude that an increase in one’s wealth makes them more likely to vote Republican.\n\n\n\nWe’ll spend some time later in the semester talking about measurements and comparisons. But for now, simply note that measurements are simply quantifications of our concepts. In order to study a phenomenon systematically, we often want to assign numbers to the entities of interest. If we are interested in the concept of economic growth, for example, then the percent change in GDP is a good way to quantify that concept. Similarly, if we are interested in democracy, then we might develop a process for assigning each country a score from -10 to 10, where -10 represents the least democratic countries and 10 represents the most democratic countries.\nOnce we have these measures, we’ll want to make the appropriate comparisons. For example, we might want to compare the average economic growth in democracies and non-democracies."
  },
  {
    "objectID": "files/01c-notes-models.html#building-models",
    "href": "files/01c-notes-models.html#building-models",
    "title": "Models",
    "section": "Building Models",
    "text": "Building Models\nBut how do you build a model? How do you put together a compelling logical defense of a causal claim?\nA model of the model-building process:\n\nStep 1: Observe some facts. If these facts are puzzling, even better. (e.g., a large percentage of people vote, countries fight wars—notice that our models are what make these facts puzzling)\nStep 2: Look at the facts as though they were the end result of some unknown process (model). Then speculate about the process that might have produced such a result. We’re thinking in terms of causation here\nStep 3: Deduce other results (implications, hypotheses, or predictions) from the model.\nStep 4: Then ask yourself whether these other implications are true and produce new models if necessary.\n\nSome rules of thumb for model-building:\n\nRule 1: Think “process.” In particular, think about causality. One thing leads to another, which causes two changes, which both affect the concept we care about.\nRule 2: Develop interesting implications. An interesting implication might be one that would otherwise (i.e., in the absence of the model) be counterintuitive. It might also be an implication for which we have the appropriate data.\nRule 3: Look for generality. If you start with a theory about US voter behavior, can you generalize it to voting behavior in other places? Finding generalizations usually involves generalizing nouns.\nRule 4: Realize that model-building is a slow process\nRule 5: Talk about your ideas."
  },
  {
    "objectID": "files/01c-notes-models.html#evaluating-models",
    "href": "files/01c-notes-models.html#evaluating-models",
    "title": "Models",
    "section": "Evaluating Models",
    "text": "Evaluating Models\nTruth\n\nAre the implications of the model correct?\n\nWhat about the assumptions? In practice, we don’t worry much about the assumptions for a few reasons. Assumptions are usually simplifications (e.g., politicians are office-seeking). Many good models are based on simple, but incorrect assumptions.\n\nAssumptions sometimes cannot be observed directly.\nTesting assumptions distracts your attention from the implications of the model. Get it the habit of exploring and evaluating the range of implications of the model.\nThat said, all else equal, we would prefer a model based on correct assumptions.\n\n\nIn particular, the model should allow us to make predictions (note that we can have a predictive model, that is not necessarily causal. However, causal models should be predictive of future observations.)\n\nQuestion: How could we evaluate the truth of our model of ACA opinions?\n\nBeware of circular or tautological models (e.g., people do what is in their self interest)\nFind critical experiments. The ideal approach is to compare alternative models. When we have two competing models, we’d like to find a situation in which the two model produce different implications. This is a powerful situation, because only one of the models can be correct.\nTo the extent possible, always think in terms of alternative models, as opposed to a single model being right or wrong.\n\nBeauty (e.g., Downs)\n\nSimplicity (office-seeking) - some assert that simpler models are more likely to be correct.\nFertility (produces many implications)\nSurprise (why is turnout so high?)\n\nJustice - does the model advance normative goals?"
  },
  {
    "objectID": "files/01c-notes-models.html#review-exercises",
    "href": "files/01c-notes-models.html#review-exercises",
    "title": "Models",
    "section": "Review Exercises",
    "text": "Review Exercises\n\nDescribe (my view of) the scientific method. How do concepts, models, measurements, and comparisons all fit together?\nSummarize my model of the model-building process.\nWhat are the five rules of thumb for model-building?\nHow do we evaluate models? Which of the three criteria do you feel are most and least important?\nWhat is a critical test and why is it important?\nIn some countries, policy responds quickly to shifts in public opinion. In other countries, policy changes much more slowly. Why? Develop a model to explain responsiveness.\nTurnout varies substantially across countries. On average, turnout is about 48% in the U.S., 83% in Brazil, 87% in Denmark, and 93% in Chile. Many researchers believe that low turnout is a problem for a democracy and would like to see higher turnout in the US.\n\nMake up two theories or models that explain the variation in turnout across countries.\nFind some critical fact/situation/observation/prediction that distinguishes between the two models. Explicitly describe how it simultaneously confirms one model and contradicts the other.\nBased on your model, what changes might the U.S. make to increase participation in elections?"
  },
  {
    "objectID": "files/03-notes-dfs.html",
    "href": "files/03-notes-dfs.html",
    "title": "Loading Data into R",
    "section": "",
    "text": "Before we can get into the details of loading pre-existing data sets into R, we need to cover a prerequisite: pacakges."
  },
  {
    "objectID": "files/03-notes-dfs.html#installing-packages",
    "href": "files/03-notes-dfs.html#installing-packages",
    "title": "Loading Data into R",
    "section": "Installing Packages",
    "text": "Installing Packages\nIf you click the “Packages” tab in RStudio (positioned in the lower-right panel by default), it will show you a list packages that are currently installed. I’ve attached a screenshot of my installed packages below, but your’s might look slightly different–I’ve probably installed a lot more than you.\n\n\n\nList of packages in RStudio\n\n\nIf you want to use a function from a package and it is not installed, you must first install it.\nYou only need to install a package once per workspace. Once you’ve installed it, you have it in that workspace forever.\nReview Exercises\n\nUse the Packages interface to install the tidyverse, haven, readxl, and ggthemes packages. You need to install these packages for each workspace (in which you want to use them)."
  },
  {
    "objectID": "files/03-notes-dfs.html#loading-packages",
    "href": "files/03-notes-dfs.html#loading-packages",
    "title": "Loading Data into R",
    "section": "Loading Packages",
    "text": "Loading Packages\nIn order to use a function from a package, though, the package must be installed and loaded. In the packages list, the check box (beside the package name) indicates whether the package is loaded. In the screenshot above, you can see that I only had one package loaded at the time I took the screenshot–blme, a package useful for estimating Bayesian linear mixed-effects models.\nLet’s see how to access functions that are in packages. First, let’s create some data to plot.\n\nx &lt;- c(1, 3, 2, 5, 4)\ny &lt;- c(2, 1, 4, 3, 5)\n\nNow let’s try to use the qplot() function in the ggplot2 package to create a scatterplot of x and y. I’m assuming that you’ve already installed the ggplot2 package (it’s included in the tidyverse package).\nNow, let’s try to use qplot().\n\nqplot(x, y)\n\nError in qplot(x, y): could not find function \"qplot\"\n\n\nYou’ll notice that the qplot() function cannot be found. That’s because while ggplot2 is installed (i.e., present in the library), it is not loaded (i.e., off the shelf). If you want to use a function from the ggplot2 package, you need to load the package using the library() function. You need to load the package each time you start a new session (e.g., restart RStudio), so be sure to include this in your script. Notice that you do not need to use quotes around the name of the package when using the library() function.\n\nlibrary(ggplot2)\nqplot(x, y)\n\nWarning: `qplot()` was deprecated in ggplot2 3.4.0.\n\n\n\n\n\n\n\n\n\nWhen we use library(), it loads the entire set of functions in the package into our workspace, making them all accessible to us. There are hundreds of functions in the ggplot2 package. If we prefer to avoid loading all the functions, we can use the syntax package::function() to tell R where to find the function in the library without loading all the functions into the workspace.\n\nggplot2::qplot(x, y)\n\n\n\n\n\n\n\n\nggplot2::qplot(x, y) will work whether or not ggplot2 is loaded.\nI don’t have strong feelings about which approach is better–it depends on the context. If you only need to use one function from package one time, then perhaps it makes more sense to use the package::function() approach. If you’ll be using many functions many times, then it makes sense to use library(). Use whichever makes most sense to you. However, I’ll tend to use package::function() a lot, because it makes it clear where the function is coming from. For example, if I write readr::read_csv(), you know that I’m referring to the read_csv() function in the readr package.\nReview Exercises\n\nWrite a script that uses the library() function to load the tidyverse, haven, and readxl packages."
  },
  {
    "objectID": "files/03-notes-dfs.html#comma-separated-value-format-.csv",
    "href": "files/03-notes-dfs.html#comma-separated-value-format-.csv",
    "title": "Loading Data into R",
    "section": "Comma-Separated Value Format (.csv)",
    "text": "Comma-Separated Value Format (.csv)\nData can be stored in a wide range of formats. One popular format, for example, is Stata’s proprietary .dta format. I typically use (and encourage you to use) the comma-separated values .csv format. The .csv format is excellent because it is open and simple. This means that anyone can use it without acess to proprietary software. It will also be useble by anyone into the foreseeable future. We can see why .csv files are easy to work with if we open it up the file nominate.csv with a text editor. You’ll see that you can read the file directly. You don’t really need software, you can do it with your eyes!\n\n\n\n.csv in a Text Editor\n\n\nI tried the same thing for a similar .dta file. You can see that it looks like nonsense. You’ll definitely need Stata (or other speciallized software) to work with this file.\n\n\n\n.dta in a Text Editor\n\n\nAlso, .csv files are easy to support, so they work in almost all data analysis software. For example, we can open up nominate.csv in Excel. You can see that we have six variables in the columns and many cases in the rows (we don’t know how many because they overflow the screen). In this case, each row represents a particular Congressperson from a particular Congress (and Presidents are also included). The second row, for example, is for Rep. Callahan (R) from the 1st Congressional District of Alabama. During the 100th Congress, Rep. Calahan has a ideology score of 0.358, which means he’s conservative, but not as conservative as Pres. Reagan, who has a score of 0.747. We’ll work with these data a lot thoughout the semester, so we’ll have plenty of time for closer examination.\n\n\n\n.csv in Excel"
  },
  {
    "objectID": "files/03-notes-dfs.html#reading-the-data",
    "href": "files/03-notes-dfs.html#reading-the-data",
    "title": "Loading Data into R",
    "section": "Reading the Data",
    "text": "Reading the Data\nFirst, you must get your data file into the project directory. First, download the data from the data page. Notice where your computer saves the file. Since you are using the cloud, then select the Files tab in the lower-right panel of the Rstudio window. Then click Upload &gt; Choose file. Navigate to and select the data file. Click Choose. Click Okay. Notice that the data file appears in your list of files.\nNow we simply need to run readr::read_csv(\"cool-data.csv\") to load the data set (cool-data.csv is just a placeholder for the actual name of the data set).\nReview Exercises\nTo practice, download the data set nominate.rds from the data page. Open RStudio and set the working directory to your class folder. Read those data into R. Now try it with the other file formats. See the code below for examples. Note that these datasets contain the same information, so you only need to choose one of the four formats. I show you how to load all four formats here for examples.\n\n# Before this will work, upload the data files. \n\n# load packages (install if needed)\nlibrary(tidyverse)  # for read_csv() and read_rds() functions\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.3.0\n✔ purrr     1.1.0     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(haven)      # for read_dta() function\nlibrary(readxl)     # for read_excel() function\n\n# read data\nnominate &lt;- read_csv(\"nominate.csv\")     # read csv file\n\nRows: 7992 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): chamber, state, party, name\ndbl (3): congress, district, ideology\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnominate2 &lt;- read_dta(\"nominate.dta\")    # read dta file\nnominate3 &lt;- read_rds(\"nominate.rds\")    # read rds file\nnominate4 &lt;- read_xlsx(\"nominate.xlsx\")  # read xlsx file\n\n\n# check that data read properly\nglimpse(nominate)  # quick look at the data\n\nRows: 7,992\nColumns: 7\n$ congress &lt;dbl&gt; 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1…\n$ chamber  &lt;chr&gt; \"House\", \"House\", \"House\", \"House\", \"House\", \"House\", \"House\"…\n$ state    &lt;chr&gt; \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AK\", \"AZ\", \"AZ\", \"…\n$ district &lt;dbl&gt; 2, 4, 3, 5, 6, 1, 7, 1, 2, 3, 5, 4, 1, 3, 1, 4, 2, 36, 10, 29…\n$ party    &lt;chr&gt; \"Republican\", \"Democrat\", \"Democrat\", \"Democrat\", \"Democrat\",…\n$ name     &lt;chr&gt; \"DICKINSON, William Louis\", \"BEVILL, Tom\", \"NICHOLS, William …\n$ ideology &lt;dbl&gt; 0.398, -0.213, -0.042, -0.175, -0.060, 0.373, -0.085, 0.283, …"
  },
  {
    "objectID": "files/03-notes-dfs.html#working-with-variables-in-data-frames",
    "href": "files/03-notes-dfs.html#working-with-variables-in-data-frames",
    "title": "Loading Data into R",
    "section": "Working with Variables in Data Frames",
    "text": "Working with Variables in Data Frames\nA data frame holds the variables, but it also hides the vectors. For example, the data frame nominate, which we loaded above, has a numeric variable ideology, but if we try to sum it, we get an error.\n\nsum(ideology)  # fails because the variable ideology is hidden in a data frame\n\nError: object 'ideology' not found\n\n\nWe’ve loaded the data set, but R can’t seem to find the variable. That’s because the variable ideology is hidden in the data frame nominate.\nIn order to access variables in data frames, we need to do one of two things.\n\nUse the $ operator.\nUse the data argument.\n\nSome functions, such as exp() are designed to work with vectors, not data frames. This will be the case for most functions we use (with the notable exceptions of plotting in with ggplot() and estimating liner model with lm()). To use the functions on variables stored in data frames, we need to use the $ operator.\nSuppose we have a data set loaded and given to the object my_data. If my_data contains the variable of interest my_variable, then we can access my_variable using the syntax my_data$my_varible. That is, the syntax data$var means “get the variable var from the data set data.” We’ll use this often, so make sure it’s clear.\n\nsum(nominate$ideology) # example of the $ operator\n\n[1] NA\n\nsum(nominate$ideology, na.rm = TRUE) # example of the $ operator\n\n[1] 202.209\n\n\nBut some functions are designed to work with data frames. For example, the qplot() function in the ggplot2 package is designed to work with data sets. If you open the help file for qplot() (i.e., help(qplot) after library(ggplot2)), you’ll see that one of the arguments is data. If you use this argument to point qplot() to the data frame, it will know where to find your variables.\n\n# load ggplot2 package, which contains the qplot() function\nlibrary(ggplot2)\n\n# example of a function with a data argument\nqplot(ideology, data = nominate)  # using the data argument\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 25 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nMany of the functions we use take a data argument. If they do not, though, we’ll need to use the $ operator. Because we’ll almost always use data stored in data frames, you need to be sure to use one approach or the other. If the function has a data argument, use it. In other cases, use the $ operator."
  },
  {
    "objectID": "files/03-notes-dfs.html#in-the-cloud",
    "href": "files/03-notes-dfs.html#in-the-cloud",
    "title": "Loading Data into R",
    "section": "In the Cloud",
    "text": "In the Cloud\n\nGo to rstudio.cloud.\nOpen a previously created project OR start a new project.\nOpen a new R script to do something new OR, if previously created, open a previously saved script to continue making progress."
  },
  {
    "objectID": "files/03-notes-dfs.html#footnotes",
    "href": "files/03-notes-dfs.html#footnotes",
    "title": "Loading Data into R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI’m assuming you are using Posit Cloud. If you are using RStudio installed locally, then you only need to install a package once per computer.↩︎"
  },
  {
    "objectID": "office-hours.html",
    "href": "office-hours.html",
    "title": "Office Hours",
    "section": "",
    "text": "I’m almost always free to chat for a few minutes after class, either in our classroom or in my office.\nMy office hours are Tuesday and Thursday from 1:00 PM to 2:00 PM. If you want to come to my official office hours, please let me know you are coming.1\nIf after class or office hours are inconvenient for you, I’m happy to arrange anther time. Email me at crainey@fsu.edu to set it up."
  },
  {
    "objectID": "office-hours.html#footnotes",
    "href": "office-hours.html#footnotes",
    "title": "Office Hours",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI have conflicts (e.g., a meeting) a meaningful fraction of the time; Calendly let me communicate when my office hours are canceled.↩︎"
  }
]